import bpy
import math
import os

# Dynamically assign assets to import later
blend_file_path = bpy.path.abspath("//")
godot_helmet_asset = os.path.join(blend_file_path, "assets", "godot-head-variation.obj") # Created by Mifthbeat - https://www.blendswap.com/blend/31288
biplane2_asset = os.path.join(blend_file_path, "assets", "biplane2.obj")
air_balloon_asset = os.path.join(blend_file_path, "assets", "cartoon-air-balloon.obj") # Created by Mokokow - https://www.blendswap.com/blend/31301
esb_asset = os.path.join(blend_file_path, "assets", "esb.obj")
gorilla_asset = os.path.join(blend_file_path, "assets", "Gorilla.obj")
lightning_asset = os.path.join(blend_file_path, "assets", "lightning_bolt.obj") # Created by PetrT - https://www.blendswap.com/blend/10596

# Delete all objects in the scene
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete()

# Remove all meshes, materials, etc. that have no users
for block in bpy.data.meshes:
    if block.users == 0:
        bpy.data.meshes.remove(block)
for block in bpy.data.materials:
    if block.users == 0:
        bpy.data.materials.remove(block)
for block in bpy.data.lights:
    if block.users == 0:
        bpy.data.lights.remove(block)
for block in bpy.data.cameras:
    if block.users == 0:
        bpy.data.cameras.remove(block)
    
scene = bpy.context.scene
scene.frame_start = 0
scene.frame_end = 650 

# First balloon setup
bpy.ops.object.select_all(action='DESELECT')
bpy.ops.wm.obj_import(filepath=air_balloon_asset)
bpy.ops.object.join()
bpy.ops.transform.resize(value=(0.4, 0.4, 0.4))
air_balloon_1 = bpy.context.selected_objects[0]
air_balloon_1.name = "Air Balloon 1"
air_balloon_1.location = (-10.6402, 0.913725, 10.2153)
air_balloon_1.rotation_mode = 'XYZ'
air_balloon_1.rotation_euler = (math.radians(90), 0, 0)

# Second balloon setup
bpy.ops.object.select_all(action='DESELECT')
bpy.ops.wm.obj_import(filepath=air_balloon_asset)
bpy.ops.object.join()
bpy.ops.transform.resize(value=(0.4, 0.4, 0.4))
air_balloon_2 = bpy.context.selected_objects[0]
air_balloon_2.name = "Air Balloon 2"
air_balloon_2.location = (-5.00687, -6.65906, 10.2153)
air_balloon_2.rotation_mode = 'XYZ'
air_balloon_2.rotation_euler = (math.radians(90), 0, 0)

# durations for each balloon's journey
duration_1 = 350  # First balloon's duration
duration_2 = 300  # Second balloon moves faster, so it has a shorter duration

end_position_2_x = -7.90116
end_position_2_y = 3.4561
end_position_2_z = 10.2153 

# Animation logic
for frame in range(scene.frame_start, scene.frame_end + 1):
    scene.frame_set(frame)

    if frame <= duration_1:  # First balloon's journey
        t = frame / duration_1
        air_balloon_1.location = (
            -10.6402 + t * (2.35281 + 10.6402),
            0.913725 + t * (-4.48176 - 0.913725),
            10.2153
        )
        air_balloon_1.rotation_euler[2] = t * 8 * math.pi  # Full rotation
        air_balloon_1.keyframe_insert(data_path="location", index=-1)
        air_balloon_1.keyframe_insert(data_path="rotation_euler", index=2)

    if frame > duration_1 and frame <= (duration_1 + duration_2):  # Second balloon's journey
        t = (frame - duration_1) / duration_2
        air_balloon_2.location = (
            -5.00687 + t * (end_position_2_x + 5.00687),
            -6.65906 + t * (end_position_2_y + 6.65906),
            end_position_2_z
        ) 
        air_balloon_2.rotation_euler[2] = t * 6 * math.pi  # Consistent rotation
        air_balloon_2.keyframe_insert(data_path="location", index=-1)
        air_balloon_2.keyframe_insert(data_path="rotation_euler", index=2)

    # Ensure balloons stay at their end positions after their animations
    if frame == duration_1:
        air_balloon_1.keyframe_insert(data_path="location", index=-1)  # Ensure it stays in place

    if frame == duration_1 + duration_2:
        air_balloon_2.keyframe_insert(data_path="location", index=-1)  # Ensure it stays in place

# Godot helmet to put on king kong
bpy.ops.wm.obj_import(filepath=godot_helmet_asset)
# Assuming the imported objects are the only selected ones right now
imported_objects = [obj for obj in bpy.context.selected_objects]
# If there's more than one object, join them
if len(imported_objects) > 1:
    # Ensure one of them is active
    bpy.context.view_layer.objects.active = imported_objects[0]
    # Join them into the active object
    bpy.ops.object.join()
helmet = bpy.context.active_object
helmet.name = "Godot Helmet"

# Set the location, rotation and scale
helmet.location = (0.002197, -0.745939, 8.07522)
helmet.scale = (0.18, 0.18, 0.18)

# Convert rotation degrees to radians and set rotation
rotation_degrees = (73.3186, 1.4532, -175.163)
rotation_radians = tuple(math.radians(deg) for deg in rotation_degrees)
helmet.rotation_euler = rotation_radians

# Load the model of the Empire State Building (and center it)
bpy.ops.wm.obj_import(filepath=esb_asset)
imported_objects = [obj for obj in bpy.context.selected_objects]
if len(imported_objects) > 1:
    bpy.context.view_layer.objects.active = imported_objects[0]
    bpy.ops.object.join()
bpy.ops.transform.translate(value=(0.0, 1.45, 0.0))
building = bpy.context.active_object
building.name = "Empire State Building"

# Load the biplane model (and resize it)
bpy.ops.object.select_all(action='DESELECT')
bpy.ops.wm.obj_import(filepath=biplane2_asset)
bpy.ops.transform.translate(value=(0.0, 0.0, 0.0))
bpy.ops.transform.resize(value=(0.2, 0.2, 0.2))
biplane=bpy.context.selected_objects[0]
biplane.name = "Airplane"

# Load the Gorilla model (and resize it)
bpy.ops.object.select_all(action='DESELECT')
bpy.ops.wm.obj_import(filepath=gorilla_asset)
imported_objects = [obj for obj in bpy.context.selected_objects]
if len(imported_objects) > 1:
    bpy.context.view_layer.objects.active = imported_objects[0]
    bpy.ops.object.join()
bpy.ops.transform. rotate ( value=-1.1 , orient_axis='X')
bpy.ops.transform.translate(value=(0.0, -0.75, 8))
bpy.ops.transform.resize(value=(0.8, 0.8, 0.8))
# Ensure the gorilla is the active object
gorilla = bpy.context.selected_objects[0]
gorilla.name = "King Kong"

# Create a new material with a brown color
brown_material = bpy.data.materials.new(name="BrownMaterial")
brown_material.use_nodes = True
bsdf = brown_material.node_tree.nodes.get('Principled BSDF')
if bsdf is not None:
    bsdf.inputs['Base Color'].default_value = (0.204, 0.073, 0.009, 1)  # RGBA; A brown color

# Assign the material to the gorilla
if gorilla.data.materials:
    # Assign to 1st material slot
    gorilla.data.materials[0] = brown_material
else:
    # No slots
    gorilla.data.materials.append(brown_material)

# create a flat plane on which to build the scene 
bpy.ops.mesh.primitive_plane_add(location=(0,0,0.01))  
plane = bpy.context.active_object  
plane.dimensions = (100,100,0)
mat = bpy.data.materials.new("mat_plane")
mat.diffuse_color = (0.904, 2.173, 0.109, 1)
plane.data.materials.append(mat)
plane.name = "Ground"

# Create a light source and configure it
light_data = bpy.data.lights.new(name="light_1", type='SPOT')
light_data.energy = 10000
light_data.shadow_soft_size = 12
# create new object with our light data block
light_object = bpy.data.objects.new(name="light_1", object_data=light_data)
# link light object
bpy.context.collection.objects.link(light_object)
# make it active 
bpy.context.view_layer.objects.active = light_object
#change location
light_object.location = (0.743729, -0.78713, 16.1377)
light_data.spot_size = 0.8 

# Create a camera
cam_data = bpy.data.cameras.new(name="cam")  
cam_object = bpy.data.objects.new(name="Camera", object_data=cam_data)  
bpy.context.collection.objects.link(cam_object) 
scene.camera = cam_object

# Configure the camera
cam_object.location = (-8.76917, 2.82362, 14.8523)  
# Convert rotation degrees to radians
rotation_degrees = (43.7713, 0.515624, -123.683)
rotation_radians = tuple(math.radians(deg) for deg in rotation_degrees)
# Set the camera rotation
cam_object.rotation_euler = rotation_radians
cam = bpy.data.cameras[cam_data.name]  
cam.lens = 30

# Lightning
bpy.ops.object.select_all(action='DESELECT')
bpy.ops.wm.obj_import(filepath=lightning_asset)
bpy.ops.transform.resize(value=(0.4, 0.4, 0.4))
imported_objects = [obj for obj in bpy.context.selected_objects]
if len(imported_objects) > 1:
    bpy.context.view_layer.objects.active = imported_objects[0]
    bpy.ops.object.join()
lightning = bpy.context.active_object
lightning.name = "Lightning 1"
lightning.location = (0.6083, 0.033149, 3.34558)
lightning.scale = (0.39, 0.66, 0.47)
lightning.dimensions = (3.82955, 7.93358, 2.9907)
rotation_degrees = (90, 0, 0)
rotation_radians = tuple(math.radians(deg) for deg in rotation_degrees)
lightning.rotation_euler = rotation_radians

# Duplicate the first lightning object
lightning2 = lightning.copy()
lightning2.data = lightning.data.copy()  # Also duplicate mesh data if the object is a mesh
lightning2.name = "Lightning 2"
bpy.context.collection.objects.link(lightning2)  # Link the duplicate to the current collection

lightning2.location = (-4.98886, -1.27477, 4.23608)
lightning2.scale = (0.55, 0.67, 0.600001)
lightning2.dimensions = (5.40065, 8.05379, 3.81792)
rotation_degrees = (83.172, 20.2088, -84.5551)
rotation_radians = tuple(math.radians(deg) for deg in rotation_degrees)
lightning2.rotation_euler = rotation_radians

# Create a new blue material
blue_material = bpy.data.materials.new(name="BlueMaterial")
blue_material.use_nodes = True
bsdf = blue_material.node_tree.nodes.get('Principled BSDF')
if bsdf:
    bsdf.inputs['Base Color'].default_value = (0.0, 0.0, 1.0, 1)  # RGBA for blue

# Assign the blue material to all material slots
lightning.data.materials.clear()  # Remove all existing materials
lightning.data.materials.append(blue_material)  # Add the new blue material
lightning2.data.materials.clear()  # Remove all existing materials
lightning2.data.materials.append(blue_material)  # Add the new blue material

# Duration for the lightning to stay visible in frames (1 second = 24 frames)
visible_duration = 24

# animation
positions = (-2,-2,0),(-2,2,0),(2,2,0),(2,-2,0),(-2,-2,0)

# start on frame 0
number_of_frame = 0 

for number_of_frame in range(scene.frame_start,scene.frame_end):

    # create a frame using number_of_frame
    scene.frame_set(number_of_frame)
   
    biplane.location = (5*math.cos((2*3.1415)*number_of_frame/120),5*math.sin((2*3.1415)*number_of_frame/120),8)
    biplane.keyframe_insert(data_path="location", index=-1)
   
    biplane.rotation_mode = 'XYZ'
    biplane.rotation_euler= [-3.1415/2,3.1415,(2*3.1415)*number_of_frame/120]  
    biplane.keyframe_insert("rotation_euler", index=-1)

    # Toggle lightning visibility
    if number_of_frame % 120 == 0:  # Lightning appears every 120 frames
        lightning.hide_viewport = False
        lightning.hide_render = False
        lightning.keyframe_insert(data_path="hide_viewport", frame=number_of_frame)
        lightning.keyframe_insert(data_path="hide_render", frame=number_of_frame)
    # Hide lightning after it has been visible for 'visible_duration' frames
    if number_of_frame % 120 == visible_duration:
        lightning.hide_viewport = True
        lightning.hide_render = True
        lightning.keyframe_insert(data_path="hide_viewport", frame=number_of_frame)
        lightning.keyframe_insert(data_path="hide_render", frame=number_of_frame)
    # Toggle lightning2 visibility
    if number_of_frame % 160 == 0:  # Lightning appears every 120 frames
        lightning2.hide_viewport = False
        lightning2.hide_render = False
        lightning2.keyframe_insert(data_path="hide_viewport", frame=number_of_frame)
        lightning2.keyframe_insert(data_path="hide_render", frame=number_of_frame)
    # Hide lightning2 after it has been visible for 'visible_duration' frames
    if number_of_frame % 160 == visible_duration:
        lightning2.hide_viewport = True
        lightning2.hide_render = True
        lightning2.keyframe_insert(data_path="hide_viewport", frame=number_of_frame)
        lightning2.keyframe_insert(data_path="hide_render", frame=number_of_frame)
 
